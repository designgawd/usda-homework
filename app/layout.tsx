import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "./components/Navigation";
import { LayoutProvider } from "@/contexts/LayoutContext";
import { AgenciesResponse } from './types/Agencies';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getAgencies(): Promise<AgenciesResponse> {
  const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/agencies`, { cache: 'no-cache' });
  if (!res.ok) {
    console.log("Get Agencies Error! Check /api/agencies")
  }
  return res.json();
}

async function getCorrections() {
  const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/corrections`, { cache: 'no-cache' });
  if (!res.ok) {
    console.log("Get Corrections Error! Check /api/corrections")
  }
  return res.json();
}

async function getTitles() {
  const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/titles`, { cache: 'no-cache' });
  if (!res.ok) {
    console.log("Get Titles Error! Check /api/titles")
  }
  return res.json();
}

async function getLayoutData() {
  const [agencies, corrections, titles] = await Promise.all([
    getAgencies(),
    getCorrections(),
    getTitles(),
  ]);

  return {
    agencies: agencies ?? null,
    corrections: corrections ?? null,
    titles: titles ?? null,
  };
}

const layoutData = await getLayoutData();

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased mt-24`}
      ><LayoutProvider data={layoutData}>
        <Header />
        {children}
        </LayoutProvider>
      </body>
    </html>
  );
}
